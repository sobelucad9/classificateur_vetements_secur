import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
import matplotlib.pyplot as plt
from PIL import Image, ImageFilter
import os
import subprocess
import sys
import pywt

# V√©rifier si OpenCV est install√©
try:
    import cv2
    OPENCV_AVAILABLE = True
except ImportError:
    OPENCV_AVAILABLE = False
    print("‚ö†Ô∏è OpenCV (cv2) n'est pas install√©. La d√©tection du bruit ne fonctionnera pas.")

# Charger le mod√®le entra√Æn√©
MODEL_PATH = "./model/classification_vetements_model.h5"
model = load_model(MODEL_PATH)

# Classes du mod√®le
class_labels = ["dress", "hat", "longsleeve", "outwear", "pants", "shirts", "shoes", "shorts", "skirt", "t-shirt"]

# üìå Fonction pour d√©tecter si une image est bruit√©e (n√©cessite OpenCV)
def needs_denoising(image, threshold=10.0):
    if not OPENCV_AVAILABLE:
        return False  # Si OpenCV n'est pas disponible, ne pas appliquer le filtrage
    img_gray = np.array(image.convert('L'))
    laplacian_var = cv2.Laplacian(img_gray, cv2.CV_64F).var()
    return laplacian_var < threshold  # Si la variance est basse, l'image est consid√©r√©e comme bruit√©e

# üìå Fonction de filtrage par ondelettes (att√©nuation plut√¥t que suppression)
def wavelet_denoise(image, attenuation_factor=0.5):
    img_gray = image.convert('L')  # Convertir en niveaux de gris
    img_array = np.array(img_gray, dtype=np.float32) / 255.0
    coeffs = pywt.wavedec2(img_array, 'haar', level=1)
    coeffs = list(coeffs)
    coeffs[0] *= attenuation_factor  # R√©duction des hautes fr√©quences au lieu de suppression
    img_denoised = pywt.waverec2(coeffs, 'haar')
    img_denoised = np.clip(img_denoised * 255.0, 0, 255).astype(np.uint8)
    return Image.fromarray(img_denoised)

# üìå Fonction de pr√©traitement avec filtrage par ondelettes
def preprocess_image(image, use_filters=True):
    if use_filters and needs_denoising(image):
        image = wavelet_denoise(image, attenuation_factor=0.5)  # Appliquer la transform√©e en ondelettes avec att√©nuation
    image = image.resize((128, 128))  # Redimensionner pour MobileNetV2
    image = image.convert("RGB")  # Assurer 3 canaux (RVB)
    img_array = img_to_array(image)
    img_array = preprocess_input(img_array)  # Appliquer le pr√©traitement MobileNetV2
    img_array = img_array.reshape(1, 128, 128, 3)  # Adapter aux dimensions attendues
    return img_array

# üìå Fonction de pr√©diction
def predict_image(image, use_filters=True):
    img_array = preprocess_image(image, use_filters)  # Pr√©traitement avec ou sans filtrage par ondelettes
    pred = model.predict(img_array)  # Pr√©diction
    predicted_class = class_labels[np.argmax(pred)]  # Classe pr√©dite

    # R√©sultats sous forme de DataFrame
    results_df = pd.DataFrame({'Classe': class_labels, 'Probabilit√©': pred.flatten()}).sort_values(by='Probabilit√©', ascending=False)

    return predicted_class, results_df

# Interface Streamlit
st.set_page_config(page_title="üëïüß¢ Classificateur de V√™tements", layout="centered")

st.title("üëïüß¢ Classificateur de v√™tements s√©curis√© avec filtrage par ondelettes adaptatif")
st.write("""
T√©l√©chargez une image pour la classer.

**Cat√©gories disponibles :**
- üëó Dress -> Robe
- üß¢ Hat -> Casquette
- üëï Longsleeve -> Manches longues
- üß• Outwear -> V√™tements d'ext√©rieur
- üëñ Pant -> Pantalon
- üëî Shirt -> Chemise
- üëü Shoes -> Chaussures
- ü©≥ Short -> Short
- üëö Skirt -> Jupe
- üëï T-shirt -> T-shirt
""")

uploaded_file = st.file_uploader("Choisissez une image...", type=["jpg", "png", "jpeg"])

use_filters = st.checkbox("Activer le filtrage par ondelettes en cas de bruit d√©tect√©", value=True)

if uploaded_file is not None:
    # Charger l'image
    image = Image.open(uploaded_file)
    st.image(image, caption="Image t√©l√©charg√©e", use_container_width=True)

    # D√©tection du bruit si OpenCV est disponible
    if OPENCV_AVAILABLE and needs_denoising(image):
        st.write("‚ö†Ô∏è L'image semble bruit√©e. Application du filtrage par ondelettes.")
    elif not OPENCV_AVAILABLE:
        st.write("‚ö†Ô∏è OpenCV n'est pas install√©. Impossible de d√©tecter le bruit.")
    else:
        st.write("‚úÖ L'image est propre, aucun filtrage n√©cessaire.")

    # Pr√©diction avec ou sans filtrage par ondelettes
    predicted_class, results_df = predict_image(image, use_filters)

    # Affichage du r√©sultat
    st.subheader(f"üõçÔ∏è Classe pr√©dite : **{predicted_class}**")

    # Afficher les probabilit√©s sous forme de tableau
    st.write("### üîç R√©sultat d√©taill√© de la classification :")
    st.dataframe(results_df.style.format({"Probabilit√©": "{:.2f}"}))
